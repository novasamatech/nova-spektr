# build_stage.yaml
---
name: Build stage app

on:
  workflow_dispatch:
  pull_request:

env:
  CSC_FOR_PULL_REQUEST: true
  CI: true

jobs:
  internal-release-build:
    # if: ${{ github.event.label.name == 'internal-build' || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Install dependencies
        uses: ./.github/workflows/install-pnpm

      - name: Add MacOS certs
        if: startsWith(matrix.os, 'macos')
        run: chmod +x .github/add_cert_in_keychain.sh && .github/add_cert_in_keychain.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Build app
        env:
          # secrets for notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          pnpm stage:sequence

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifats
          path: |
            release/dist/*.exe
            release/dist/*.dmg
            release/dist/*.AppImage

  internal-release-distribute:
    needs: internal-release-build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifats

      - name: Debug
        run: ls -la

      - name: Replace space by "-"
        run: |
          for file in *; do
            if [ -f "$file" ]; then
              new_name=$(echo "$file" | tr ' ' '-')
              if [ "$new_name" != "$file" ]; then # Skip files with no spaces
                mv "$file" "$new_name"
              fi
            fi
          done

      - name: Set up S3cmd cli tool
        uses: s3-actions/s3cmd@v1.5.0
        with:
          provider: scaleway
          access_key: ${{ secrets.S3_ACCESS_KEY }}
          secret_key: ${{ secrets.S3_SECRET_KEY }}

      - name: Interact with object storage
        run: |
          mkdir ${{ github.sha }}
          artifacts=("*.exe" "*arm64.dmg" "*.AppImage" "*[!arm64].dmg")
          for artifact_pattern in "${artifacts[@]}"; do
            for artifact in $artifact_pattern; do
              if [ -f "$artifact" ]; then
                mv "$artifact" "${{ github.sha }}/"
                s3cmd put "${{ github.sha }}/$artifact" --acl-public "s3://spektr-releases/${{ github.sha }}/$artifact"
                s3cmd signurl "s3://spektr-releases/${{ github.sha }}/$artifact" $(echo "`date +%s` + 3600 * 24 * 7" | bc)
              fi
            done
          done

      - name: Notify Telegram channel
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üë®‚Äçüíª Stage build was created successfully, URL to download:
            ${{ github.env.ARTIFACT_URL }}
