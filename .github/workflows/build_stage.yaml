# build_stage.yaml
---
name: Build stage app

on:
  workflow_dispatch:
  pull_request:
    # types: [labeled]

env:
  CSC_FOR_PULL_REQUEST: true
  CI: true
  S3_BUCKET: s3://spektr-releases
  STORING_DAYS: 60

jobs:
  internal-version-increment:
    # if: ${{ github.event.label.name == 'internal-build' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: pkg
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"
      
      - name: Update version from secret
        id: update_version
        run: |
          PKG_VERSION=${{ steps.pkg.outputs.version }}
          INTERNAL_BUILD_VERSION=${{ secrets.INTERNAL_BUILD_VERSION }}
          if [[ $PKG_VERSION == "$INTERNAL_BUILD_VERSION"* ]]; then
            # Increment the last number of INTERNAL_BUILD_VERSION
            NEW_VERSION=$(echo $INTERNAL_BUILD_VERSION | awk -F. '{$NF++; print}' OFS=.)
          else
            NEW_VERSION="${PKG_VERSION}.1"
          fi
          echo "::set-output name=new_version::$NEW_VERSION"
        shell: bash
      
      - name: Write app version to secrets
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'INTERNAL_BUILD_VERSION'
          value: ${{ steps.update_version.outputs.new_version }}
          repository: novasamatech/nova-spektr
          token: ${{ secrets.WRITE_SECRET_PAT }}


  internal-release-build:
    runs-on: ${{ matrix.os }}
    needs: internal-version-increment
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Install dependencies
        uses: ./.github/workflows/install-pnpm

      - name: Add MacOS certs
        if: startsWith(matrix.os, 'macos')
        run: chmod +x .github/add_cert_in_keychain.sh && .github/add_cert_in_keychain.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        
      - name: Update package.json
        run: |
          jq '.version = "${{ secrets.INTERNAL_BUILD_VERSION }}"' package.json > temp.json && mv temp.json package.json

      - name: Build app
        env:
          # secrets for notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          pnpm stage:sequence

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifats
          path: |
            release/dist/*.exe
            release/dist/*.dmg
            release/dist/*.AppImage

  internal-release-distribute:
    needs: internal-release-build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifats

      - name: Debug
        run: ls -la

      - name: Replace space by "-"
        run: |
          for file in *; do
            if [ -f "$file" ]; then
              new_name=$(echo "$file" | tr ' ' '-')
              if [ "$new_name" != "$file" ]; then # Skip files with no spaces
                mv "$file" "$new_name"
              fi
            fi
          done
        
      - name: ‚öôÔ∏è Install dependencies
        uses: ./.github/workflows/setup-s3cmd
        with:
          s3_access_key: ${{ secrets.S3_ACCESS_KEY }}
          s3_secret_key: ${{ secrets.S3_SECRET_KEY }}

      - name: Interact with object storage
        id: interact_with_storage
        run: |
          declare -A artifacts=(["windows_app"]="*.exe" ["macos_64_app"]="*arm64.dmg" ["linux_app"]="*.AppImage" ["macos_app"]="*[!arm64].dmg")
          for artifact_name in "${!artifacts[@]}"; do
            artifact_pattern=${artifacts[$artifact_name]}
            for artifact in $artifact_pattern; do
              if [ -f "$artifact" ]; then
                s3cmd put "$artifact" --acl-public "${{ env.S3_BUCKET }}/${{ github.sha }}/$artifact"
                url=$(s3cmd signurl "${{ env.S3_BUCKET }}/${{ github.sha }}/$artifact" $(echo "`date +%s` + 3600 * 24 * ${{ env.STORING_DAYS }}" | bc))
                echo "::set-output name=$artifact_name::[$artifact]($url)"
              fi
            done
          done

      - name: Notify Telegram channel
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO_DEV }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: | 
            üë®‚Äçüíª Stage build was created successfully, URLs to download:
              - Windows: ${{ steps.interact_with_storage.outputs.windows_app }}
              - Linux: ${{ steps.interact_with_storage.outputs.linux_app }}
              - MacOS_64: ${{ steps.interact_with_storage.outputs.macos_64_app }}
              - MacOS: ${{ steps.interact_with_storage.outputs.macos_app }}

              Branch: [${{ github.head_ref }}](https://github.com/${{ github.repository }}/tree/${{ github.head_ref }})
              PR: https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}
